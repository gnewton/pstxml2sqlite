package main

/////////////////////////////////////////////////////////////////
//Initial code generated by chidley https://github.com/gnewton/chidley //
/////////////////////////////////////////////////////////////////

import (
	"database/sql"
	"encoding/xml"
	lib "github.com/gnewton/pstxml2sqlite/pstxml2sqlitestructs"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/sqlite"
	"log"
	"sync"
)

const (
	JsonOut = iota
	XmlOut
	CountAll
)

var toJson bool = false
var toXml bool = false

var oneLevelDown bool = false

//var filenames = []string{"/home/gnewton/aafc_email_pst/all.xml.bz2"}
var filenames = []string{"/home/gnewton/work/pst2json/all.xml.bz2"}

//var filenames = []string{"/home/gnewton/work/pst2json/archive_2018_June15.pst.xml.bz2"}

var musage bool = false

var uniqueFlags = []*bool{
	&toJson,
	&toXml}

//var filename = "/home/gnewton/work/pst2json/backup-20170719.pst.old.xml.bz2"
//
var counter = 0
var countAll int64 = 0

func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)

	db, err := gorm.Open("sqlite3", "a.db")
	if err != nil {
		panic("failed to connect database")
	}
	//defer db.Close()

	db.CreateTable(&lib.Message{})
	db.CreateTable(&lib.Recipient{})
	db.CreateTable(&lib.Attachment{})
	db.Close()

	db2, err := sql.Open("sqlite3", "file:a.db")
	if err != nil {
		log.Fatal(err)
	}
	tx2, err := db2.Begin()
	if err != nil {
		log.Fatal(err)
	}

	c := make(chan []*lib.Message, 200)

	stmt, err := newStatement(tx2)
	if err != nil {
		log.Fatal(err)
	}

	saver := &MessageSaver{
		tx2:  tx2,
		db2:  db2,
		c:    c,
		stmt: stmt,
	}

	var wg sync.WaitGroup

	num := 5

	for i := 0; i < num; i++ {
		go saver.run(&wg)
		wg.Add(1)
	}

	for i := 0; i < len(filenames); i++ {
		filename := filenames[i]

		reader, _, err := genericReader(filename)
		if err != nil {
			log.Fatal(err)
			return
		}

		dups = make(map[string]bool, 0)
		decoder := xml.NewDecoder(reader)

		for {
			token, _ := decoder.Token()
			if token == nil {
				break
			}
			switch se := token.(type) {
			case xml.StartElement:
				handleFeed(saver, se, decoder, c)
			}

		}
	}
	if counter > 0 {
		tx2.Commit()
	}
	close(c)

	wg.Wait()
}
